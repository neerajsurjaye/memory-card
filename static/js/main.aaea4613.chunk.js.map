{"version":3,"sources":["components/Cards.js","components/Window.js","App.js","index.js"],"names":["Card","props","className","onClick","upd","val","Window","useState","selected","setSelected","nCards","lost","setLost","updateSelected","console","log","includes","score","setScore","maxScore","setMaxScore","numbers","cards","iter","length","i","push","Math","floor","random","genNum","comp","Cards","flex","genCards","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAYeA,EAVJ,SAACC,GAGR,OACI,qBAAKC,UAAU,OAAOC,QAAS,kBAAMF,EAAMG,IAAIH,EAAMI,MAArD,SACMJ,EAAMI,OC2GLC,EA/GF,SAACL,GAAW,IAAD,EACUM,mBAAS,IADnB,mBACfC,EADe,KACLC,EADK,OAEKF,mBAAS,IAFd,mBAEfG,EAFe,aAGEH,mBAAS,IAHX,mBAGfI,EAHe,KAGTC,EAHS,OAIAL,mBAAS,GAJT,mBA4ChBM,GA5CgB,UA4CC,SAACR,GAClBS,QAAQC,IAAIV,GACRG,EAASQ,SAASX,IAClBO,EAAQ,GAIZ,IAAIK,EAAQhB,EAAMgB,MAClBA,EAAMC,SAASD,EAAMA,MAAQ,GAEzBA,EAAMA,OAASA,EAAME,UACrBF,EAAMG,YAAYH,EAAMA,MAAQ,GAIpCR,EAAY,GAAD,mBAAKD,GAAL,CAAeH,OA+C9B,OACI,sBAAKH,UAAU,YAAf,cAnCW,WACX,GAAY,GAARS,EACA,OAAO,sBAAKT,UAAU,aAAf,UACH,oBAAIA,UAAU,OAAd,kBACA,wBAAQA,UAAU,SAASC,QAAS,WAV5CM,EAAY,IACZR,EAAMgB,MAAMC,SAAS,GACrBN,EAAQ,IAQA,sBAMR,IAAIS,EApEK,WACT,IACIC,EAAQ,GAERC,EAAOb,EAIPF,EAASgB,QAAU,EACnBD,GAAcf,EAASgB,OAGvBD,GAAc,EAIlB,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAME,IACtBH,EAAMI,KAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,WAI/B,IAAK,IAAIJ,EAAI,EAAGA,EAAI,EAAGA,IACfjB,EAASgB,QAAU,GACnBF,EAAMI,KAAKlB,EAASmB,KAAKC,MAAMD,KAAKE,SAAWrB,EAASgB,UAIhE,OAAOF,EAyCOQ,GAGVC,EAAO,GACXjB,QAAQC,IAAI,aAEZ,IAAK,IAAIU,EAAI,EAAGA,EAAIf,EAAQe,IAExBM,EAAKL,KAAK,cAACM,EAAD,CAAO3B,IAAKgB,EAAQI,GAAYrB,IAAKS,GAARY,IAM3C,IAFA,IAAIQ,EAAO,GAEFR,EAAI,EAAGA,EAAI,EAAGA,IACnBQ,EAAKP,KAAK,sBAAaxB,UAAU,MAAvB,UAA8B6B,EAAS,EAAJN,GAAQM,EAAK,EAAQ,EAAJN,GAAQM,EAAK,EAAQ,EAAJN,KAA3DA,IAGxB,OAAOQ,EAOuBC,OC1FvBC,MAhBf,WAAgB,IAAD,EAEa5B,mBAAS,GAFtB,mBAENU,EAFM,KAECC,EAFD,OAGmBX,mBAAS,GAH5B,mBAGNY,EAHM,KAGIC,EAHJ,KAOb,OACE,sBAAKlB,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,yBACA,sBAAKA,UAAU,aAAf,qBAAqCe,EAArC,eAAwDE,KACxD,cAAC,EAAD,CAAQF,MAAO,CAAEA,MAAOA,EAAOC,SAAUA,EAAUC,SAAUA,EAAUC,YAAaA,SCT1FgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.aaea4613.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nlet Card = (props) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card\" onClick={() => props.upd(props.val)}>\r\n            { props.val}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Card;","import React, { useState, useEffect } from \"react\";\r\nimport Cards from \"./Cards\";\r\n\r\nlet Window = (props) => {\r\n    let [selected, setSelected] = useState([]);\r\n    let [nCards, setCards] = useState(10);\r\n    let [lost, setLost] = useState(0);\r\n    let [upd, setUpd] = useState(0);\r\n    // let [currCards, setCurrCards] = useState([]);\r\n\r\n\r\n    // useEffect(() => {\r\n    //     let intev = setInterval(() => { setUpd(upd + 1) }, 1000);\r\n    //     return () => { clearInterval(intev) };\r\n    // }, [upd]);\r\n\r\n\r\n    let genNum = () => {\r\n        let val = -1;\r\n        let cards = [];\r\n\r\n        let iter = nCards;\r\n\r\n\r\n        //sets iter \r\n        if (selected.length <= 2) {\r\n            iter = iter - selected.length;\r\n        }\r\n        else {\r\n            iter = iter - 2;\r\n        }\r\n\r\n        // Generates random number\r\n        for (let i = 0; i < iter; i++) {\r\n            cards.push(Math.floor(Math.random() * 30));\r\n        }\r\n\r\n        //pushes selected cards\r\n        for (let i = 0; i < 2; i++) {\r\n            if (selected.length >= 1) {\r\n                cards.push(selected[Math.floor(Math.random() * selected.length)]);\r\n            }\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    let updateSelected = (val) => {\r\n        console.log(val);\r\n        if (selected.includes(val)) {\r\n            setLost(1);\r\n        }\r\n\r\n        // console.log(props.score.score, \"score\");\r\n        let score = props.score;\r\n        score.setScore(score.score + 1);\r\n\r\n        if (score.score >= score.maxScore) {\r\n            score.setMaxScore(score.score + 1);\r\n        }\r\n\r\n\r\n        setSelected([...selected, val]);\r\n\r\n        // console.log(\"selected\", selected, val);\r\n    }\r\n\r\n\r\n    let reset = () => {\r\n        setSelected([]);\r\n        props.score.setScore(0);\r\n        setLost(0);\r\n    }\r\n\r\n\r\n    let genCards = () => {\r\n        if (lost == 1) {\r\n            return <div className=\"lostScreen\">\r\n                <h1 className=\"lost\">Lost</h1>\r\n                <button className=\"button\" onClick={() => { reset() }}>Reset</button>\r\n            </div>;\r\n        }\r\n\r\n\r\n\r\n        let numbers = genNum();\r\n        // setCurrCards([...numbers]);\r\n\r\n        let comp = [];\r\n        console.log(\"Gen Cards\");\r\n\r\n        for (let i = 0; i < nCards; i++) {\r\n\r\n            comp.push(<Cards val={numbers[i]} key={i} upd={updateSelected} ></Cards>)\r\n\r\n        }\r\n\r\n        let flex = [];\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            flex.push(<div key={i} className=\"row\">{comp[i * 3]}{comp[1 + i * 3]}{comp[2 + i * 3]}</div>)\r\n        }\r\n\r\n        return flex;\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\"> { genCards()}</div >\r\n    )\r\n}\r\n\r\nexport default Window;","import React, { useState } from \"react\";\nimport './App.css';\nimport Window from \"./components/Window\";\n\nfunction App() {\n\n  const [score, setScore] = useState(0);\n  const [maxScore, setMaxScore] = useState(0);\n\n  // setMaxScore(3);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Header\" >Memory Card</div>\n      <div className=\"ScoreBoard\">Score = {score} MaxScore = {maxScore}</div>\n      <Window score={{ score: score, setScore: setScore, maxScore: maxScore, setMaxScore: setMaxScore }} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}